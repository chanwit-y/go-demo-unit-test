// Code generated by mockery v2.14.0. DO NOT EDIT.

package customer 

import (
	"errors"
	entity "go-demo-unit-test/domain/entity"


	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: data
func (_m *MockRepository) Create(data entity.Customer) (entity.Customer, error) {
	ret := _m.Called(data)

	var r0 entity.Customer
	if rf, ok := ret.Get(0).(func(entity.Customer) entity.Customer); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Get(0).(entity.Customer)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Customer) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *MockRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields:
func (_m *MockRepository) Find() ([]*entity.Customer, error) {
	ret := _m.Called()

	var r0 []*entity.Customer
	if rf, ok := ret.Get(0).(func() []*entity.Customer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Customer)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: data
func (_m *MockRepository) Update(data entity.Customer) error {
	ret := _m.Called(data)

	var r0 error
	if rf, ok := ret.Get(0).(func(entity.Customer) error); ok {
		r0 = rf(data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// NewRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockRepository(t mockConstructorTestingTNewRepository) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

func NewMockData[T any](
	mock *MockRepository, 
	name string, data T) *MockRepository {

	mock.On(name).Return(data, nil)
	return mock
}


func NewMockDataParam[T,P any](
	mock *MockRepository, 
	name string, data T, param P) *MockRepository {
	mock.On(name, param).Return(data, nil)
	return mock
}

func NewMockParamNoData[P any](
	mock *MockRepository, 
	name string, param P) *MockRepository {
	mock.On(name, param).Return(nil)
	return mock
}

func NewMockError(mock *MockRepository, name string) *MockRepository {
	mock.On(name).Return(nil, errors.New("error"))
	return mock
}

func NewMockParamError[P any](mock *MockRepository, name string, param P, err string) *MockRepository {
	mock.On(name, param).Return(errors.New(err))
	return mock
}